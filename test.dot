digraph "" {
	graph [  splines="true"  forcelabels="true"  pad="1,0.25"  nodesep="2"  overlap="false"  bgcolor="white"    ];
	"flask/user.py" -> User	 [ weight = 1 ];
	"flask/user.py" -> "db.execute"	 [ weight = 2 ];
	"flask/user.py" -> str	 [ weight = 2 ];
	"flask/user.py" -> "logger.debug"	 [ weight = 5 ];
	"flask/user.py" -> get_db	 [ weight = 2 ];
	"flask/user.py" -> "logger.error"	 [ weight = 1 ];
	"flask/user.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/user.py" -> "db.commit"	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> add_X_to_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "clib.read_db"	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> apply_function_to_both_sides_of_expression	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> apply_gradient_to_scalar_function	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> expand_RHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "random.randint"	 [ weight = 82 ];
	"flask/validate_steps_sympy.py" -> expr_is_true_under_condition_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> add_expr_1_to_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> multiply_expr_by_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> substitute_LHS_of_six_expressions_into_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> substitute_LHS_of_expr_1_into_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> change_five_variables_in_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> drop_nondominant_term	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> maximum_of_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> sum_exponents_RHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> factor_out_x_from_rhs	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "sympy.im"	 [ weight = 2 ];
	"flask/validate_steps_sympy.py" -> X_cross_both_sides_by	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> subtract_X_from_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> multiply_both_sides_by	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> len	 [ weight = 2 ];
	"flask/validate_steps_sympy.py" -> conjugate_function_X	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> simplify	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> distribute_conjugate_to_factors	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> replace_constant_with_value	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> divide_expr_by_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> str	 [ weight = 188 ];
	"flask/validate_steps_sympy.py" -> select_real_parts	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> expand_integrand	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> conjugate_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> function_is_odd	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> expand_LHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> conjugate_transpose_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> change_six_variables_in_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> differentiate_with_respect_to	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> indefinite_integrate_RHS_over	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> replace_scalar_with_vector	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> substitute_LHS_of_three_expressions_into_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "logger.debug"	 [ weight = 27 ];
	"flask/validate_steps_sympy.py" -> substitute_LHS_of_five_expressions_into_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> add_zero_to_LHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> add_zero_to_RHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> select_imag_parts	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> distribute_conjugate_transpose_to_factors	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> swap_LHS_with_RHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> integrate	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> indefinite_integration	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> apply_operator_to_bra	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> expr_is_equivalent_to_expr_under_the_condition	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> separate_three_vector_components	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> subtract_expr_1_from_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> take_curl_of_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "logger.error"	 [ weight = 3 ];
	"flask/validate_steps_sympy.py" -> change_two_variables_in_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> apply_operator_to_ket	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> substitute_LHS_of_four_expressions_into_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> change_variable_X_to_Y	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> divide_both_sides_by	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> expand_magnitude_to_conjugate	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> substitute_RHS_of_expr_1_into_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "latex_to_sympy.get_sympy_expr_from_AST_str"	 [ weight = 2 ];
	"flask/validate_steps_sympy.py" -> apply_divergence	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> multiply_LHS_by_unity	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> indefinite_integrate_LHS_over	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> integrate_over_from_to	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "sympy.Mul"	 [ weight = 10 ];
	"flask/validate_steps_sympy.py" -> square_root_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> separate_two_vector_components	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "logger.info"	 [ weight = 290 ];
	"flask/validate_steps_sympy.py" -> "sympy.Pow"	 [ weight = 4 ];
	"flask/validate_steps_sympy.py" -> indefinite_integral_over	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "sympy.re"	 [ weight = 2 ];
	"flask/validate_steps_sympy.py" -> partially_differentiate_with_respect_to	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> sum_exponents_LHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> factor_out_x_from_lhs	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> "sympy.simplify"	 [ weight = 80 ];
	"flask/validate_steps_sympy.py" -> "sympy.Add"	 [ weight = 8 ];
	"flask/validate_steps_sympy.py" -> both_sides_dot_X	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> multiply_RHS_by_unity	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> X_dot_both_sides	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> change_three_variables_in_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> claim_LHS_equals_RHS	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> evaluate_definite_integral	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> separate_vector_into_two_trigonometric_ratios	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> LHS_of_expr_1_eq_LHS_of_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> factor_out_x	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> substitute_LHS_of_two_expressions_into_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> both_sides_cross_X	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> claim_expr_1_equals_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> make_expr_power	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> function_is_even	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> LHS_of_expr_equals_LHS_of_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> RHS_of_expr_1_eq_RHS_of_expr_2	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> raise_both_sides_to_power	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> Exception	 [ weight = 3 ];
	"flask/validate_steps_sympy.py" -> declare_variable_replacement	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> change_four_variables_in_expr	 [ weight = 1 ];
	"flask/validate_steps_sympy.py" -> mult_expr_1_by_expr_2	 [ weight = 1 ];
	"flask/common_lib.py" -> "json.loads"	 [ weight = 1 ];
	"flask/common_lib.py" -> "json.load"	 [ weight = 1 ];
	"flask/common_lib.py" -> "conn.commit"	 [ weight = 1 ];
	"flask/common_lib.py" -> "random.randint"	 [ weight = 2 ];
	"flask/common_lib.py" -> "cur.execute"	 [ weight = 4 ];
	"flask/common_lib.py" -> validate	 [ weight = 1 ];
	"flask/common_lib.py" -> str	 [ weight = 7 ];
	"flask/common_lib.py" -> write_db	 [ weight = 1 ];
	"flask/common_lib.py" -> open	 [ weight = 1 ];
	"flask/common_lib.py" -> "logger.debug"	 [ weight = 1 ];
	"flask/common_lib.py" -> "conn.cursor"	 [ weight = 2 ];
	"flask/common_lib.py" -> "logger.error"	 [ weight = 4 ];
	"flask/common_lib.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/common_lib.py" -> validate_content	 [ weight = 1 ];
	"flask/common_lib.py" -> "logger.info"	 [ weight = 7 ];
	"flask/common_lib.py" -> create_sql_connection	 [ weight = 2 ];
	"flask/common_lib.py" -> "json.dumps"	 [ weight = 1 ];
	"flask/common_lib.py" -> Exception	 [ weight = 6 ];
	"flask/common_lib.py" -> "conn.close"	 [ weight = 2 ];
	"flask/common_lib.py" -> "sqlite3.connect"	 [ weight = 2 ];
	"flask/logs_to_stats.py" -> "df.drop"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "pandas.to_datetime"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "re.findall"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> len	 [ weight = 4 ];
	"flask/logs_to_stats.py" -> "plt.bar"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> open	 [ weight = 2 ];
	"flask/logs_to_stats.py" -> enumerate	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "logger.debug"	 [ weight = 2 ];
	"flask/logs_to_stats.py" -> "pandas.read_csv"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "plt.close"	 [ weight = 4 ];
	"flask/logs_to_stats.py" -> range	 [ weight = 2 ];
	"flask/logs_to_stats.py" -> "plt.legend"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "shutil.move"	 [ weight = 4 ];
	"flask/logs_to_stats.py" -> "msg.startswith"	 [ weight = 3 ];
	"flask/logs_to_stats.py" -> "plt.xticks"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "line.replace"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "pandas.DataFrame"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "df.groupby"	 [ weight = 3 ];
	"flask/logs_to_stats.py" -> list	 [ weight = 2 ];
	"flask/logs_to_stats.py" -> "logger.info"	 [ weight = 5 ];
	"flask/logs_to_stats.py" -> "msg.replace"	 [ weight = 3 ];
	"flask/logs_to_stats.py" -> "list_of_dicts.append"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "plt.title"	 [ weight = 3 ];
	"flask/logs_to_stats.py" -> "gb_reduced.unstack"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "pandas.DatetimeIndex"	 [ weight = 3 ];
	"flask/logs_to_stats.py" -> "plt.ylabel"	 [ weight = 4 ];
	"flask/logs_to_stats.py" -> "geolite2.lookup"	 [ weight = 1 ];
	"flask/logs_to_stats.py" -> "plt.savefig"	 [ weight = 4 ];
	"flask/logs_to_stats.py" -> "f.readlines"	 [ weight = 2 ];
	"flask/logs_to_stats.py" -> "plt.xlabel"	 [ weight = 1 ];
	"flask/mvcc/controller_mvcc.py" -> "view.get_input"	 [ weight = 1 ];
	"flask/mvcc/controller_mvcc.py" -> "view.present_output"	 [ weight = 1 ];
	"flask/wsgi.py" -> "app.run"	 [ weight = 1 ];
	"flask/wsgi.py" -> print	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "py_code_dict.items"	 [ weight = 4 ];
	"flask/introspection/static_call_graph.py" -> "dict_of_imports_per_file.items"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "origin_py_file.replace"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> len	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "this_line.replace"	 [ weight = 7 ];
	"flask/introspection/static_call_graph.py" -> "py_dict.items"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> open	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "this_line.strip"	 [ weight = 3 ];
	"flask/introspection/static_call_graph.py" -> "this_line.lstrip"	 [ weight = 4 ];
	"flask/introspection/static_call_graph.py" -> print	 [ weight = 14 ];
	"flask/introspection/static_call_graph.py" -> "glob.glob"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "re.sub"	 [ weight = 6 ];
	"flask/introspection/static_call_graph.py" -> "py_file.replace"	 [ weight = 4 ];
	"flask/introspection/static_call_graph.py" -> "this_line.rstrip"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "dict_of_functions_per_file.items"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "this_line.startswith"	 [ weight = 3 ];
	"flask/introspection/static_call_graph.py" -> "fil.readlines"	 [ weight = 1 ];
	"flask/introspection/static_call_graph.py" -> "line_without_comments.rstrip"	 [ weight = 1 ];
	"flask/convert_v3_csv_infrules_to_dict.py" -> str	 [ weight = 3 ];
	"flask/convert_v3_csv_infrules_to_dict.py" -> "pandas.read_csv"	 [ weight = 1 ];
	"flask/convert_v3_csv_infrules_to_dict.py" -> print	 [ weight = 2 ];
	"flask/convert_v3_csv_infrules_to_dict.py" -> range	 [ weight = 1 ];
	"flask/inference_rules.py" -> Mul	 [ weight = 2 ];
	"flask/inference_rules.py" -> diff	 [ weight = 2 ];
	"flask/inference_rules.py" -> divergence	 [ weight = 2 ];
	"flask/inference_rules.py" -> srepr	 [ weight = 3 ];
	"flask/inference_rules.py" -> eval	 [ weight = 1 ];
	"flask/inference_rules.py" -> curl	 [ weight = 2 ];
	"flask/inference_rules.py" -> re	 [ weight = 2 ];
	"flask/inference_rules.py" -> cross	 [ weight = 4 ];
	"flask/inference_rules.py" -> dot	 [ weight = 4 ];
	"flask/inference_rules.py" -> integrate	 [ weight = 6 ];
	"flask/inference_rules.py" -> Pow	 [ weight = 4 ];
	"flask/inference_rules.py" -> im	 [ weight = 2 ];
	"flask/inference_rules.py" -> relation	 [ weight = 66 ];
	"flask/sql_db.py" -> init_db	 [ weight = 1 ];
	"flask/sql_db.py" -> "f.read"	 [ weight = 1 ];
	"flask/sql_db.py" -> str	 [ weight = 1 ];
	"flask/sql_db.py" -> "app.teardown_appcontext"	 [ weight = 1 ];
	"flask/sql_db.py" -> "g.pop"	 [ weight = 1 ];
	"flask/sql_db.py" -> "logger.debug"	 [ weight = 1 ];
	"flask/sql_db.py" -> "db.executescript"	 [ weight = 1 ];
	"flask/sql_db.py" -> "db.close"	 [ weight = 1 ];
	"flask/sql_db.py" -> "click.command"	 [ weight = 1 ];
	"flask/sql_db.py" -> get_db	 [ weight = 1 ];
	"flask/sql_db.py" -> "logger.error"	 [ weight = 1 ];
	"flask/sql_db.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/sql_db.py" -> "logger.info"	 [ weight = 5 ];
	"flask/sql_db.py" -> "current_app.open_resource"	 [ weight = 1 ];
	"flask/sql_db.py" -> "sqlite3.connect"	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> isinstance	 [ weight = 3 ];
	"flask/introspection/dump_ast.py" -> dump	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> set	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> "f_name.read"	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> main	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> open	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> parse	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> print	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> "parser.add_argument"	 [ weight = 3 ];
	"flask/introspection/dump_ast.py" -> "sys.exit"	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> list	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> sorted	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> "parser.parse_args"	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> "argparse.ArgumentParser"	 [ weight = 1 ];
	"flask/introspection/dump_ast.py" -> "seen.add"	 [ weight = 3 ];
	"flask/introspection/dump_ast.py" -> Options	 [ weight = 1 ];
	"flask/config.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.popularity_of_infrules"	 [ weight = 1 ];
	"flask/controller.py" -> login_user	 [ weight = 1 ];
	"flask/controller.py" -> "compute.create_step"	 [ weight = 1 ];
	"flask/controller.py" -> "client.parse_request_body_response"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.search_expression_latex"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.edit_expr_note"	 [ weight = 1 ];
	"flask/controller.py" -> "filenames.sort"	 [ weight = 2 ];
	"flask/controller.py" -> "clib.read_db"	 [ weight = 41 ];
	"flask/controller.py" -> User	 [ weight = 1 ];
	"flask/controller.py" -> "handler_warning.setLevel"	 [ weight = 1 ];
	"flask/controller.py" -> "secure_headers.flask"	 [ weight = 1 ];
	"flask/controller.py" -> init_db	 [ weight = 1 ];
	"flask/controller.py" -> "requests.post"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.popularity_of_derivations"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.create_d3js_json"	 [ weight = 2 ];
	"flask/controller.py" -> "selected_string.replace"	 [ weight = 2 ];
	"flask/controller.py" -> "validators.Length"	 [ weight = 47 ];
	"flask/controller.py" -> "app.run"	 [ weight = 1 ];
	"flask/controller.py" -> "time.time"	 [ weight = 4 ];
	"flask/controller.py" -> "random.randint"	 [ weight = 27 ];
	"flask/controller.py" -> RevisedTextForm	 [ weight = 18 ];
	"flask/controller.py" -> "compute.update_expr_sympy"	 [ weight = 2 ];
	"flask/controller.py" -> CSRFProtect	 [ weight = 1 ];
	"flask/controller.py" -> flash	 [ weight = 148 ];
	"flask/controller.py" -> "compute.edit_operator_latex"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.generate_d3js_json_map_of_derivations"	 [ weight = 1 ];
	"flask/controller.py" -> "validators.NumberRange"	 [ weight = 3 ];
	"flask/controller.py" -> NameOfDerivationInputForm	 [ weight = 1 ];
	"flask/controller.py" -> render_template	 [ weight = 52 ];
	"flask/controller.py" -> "compute.edit_symbol_latex"	 [ weight = 1 ];
	"flask/controller.py" -> "logging.warning"	 [ weight = 5 ];
	"flask/controller.py" -> LatexIO	 [ weight = 1 ];
	"flask/controller.py" -> "compute.edit_derivation_note"	 [ weight = 1 ];
	"flask/controller.py" -> "requests.get"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_symbols_not_in_use"	 [ weight = 1 ];
	"flask/controller.py" -> "latex_generated_by_sympy.items"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.popularity_of_expressions"	 [ weight = 4 ];
	"flask/controller.py" -> "compute.create_derivation_png"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.delete_symbol"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.create_files_of_db_content"	 [ weight = 7 ];
	"flask/controller.py" -> "sorted_list_symbols.sort"	 [ weight = 1 ];
	"flask/controller.py" -> len	 [ weight = 2 ];
	"flask/controller.py" -> "response.set_data"	 [ weight = 1 ];
	"flask/controller.py" -> "User.get"	 [ weight = 2 ];
	"flask/controller.py" -> "token_response.json"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.edit_expr_name"	 [ weight = 1 ];
	"flask/controller.py" -> logout_user	 [ weight = 1 ];
	"flask/controller.py" -> "clib.json_to_sql"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.generate_expressions_in_step_with_symbols"	 [ weight = 1 ];
	"flask/controller.py" -> secure_filename	 [ weight = 1 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_expr"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.hash_of_step"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.add_inf_rule"	 [ weight = 1 ];
	"flask/controller.py" -> FieldList	 [ weight = 1 ];
	"flask/controller.py" -> "compute.popularity_of_symbols_in_derivations"	 [ weight = 5 ];
	"flask/controller.py" -> "compute.guess_missing_PDG_AST_ids"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.rename_inf_rule"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_inf_rules"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.get_list_of_sorted_linear_indices"	 [ weight = 1 ];
	"flask/controller.py" -> str	 [ weight = 276 ];
	"flask/controller.py" -> "vir.validate_step"	 [ weight = 9 ];
	"flask/controller.py" -> "latex_generated_by_sympy_all.keys"	 [ weight = 1 ];
	"flask/controller.py" -> "app.route"	 [ weight = 61 ];
	"flask/controller.py" -> "compute.fill_in_missing_PDG_AST_ids"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.popularity_of_symbols_in_expressions"	 [ weight = 5 ];
	"flask/controller.py" -> "compute.linear_index_to_step_id"	 [ weight = 2 ];
	"flask/controller.py" -> next	 [ weight = 2 ];
	"flask/controller.py" -> RotatingFileHandler	 [ weight = 3 ];
	"flask/controller.py" -> Flask	 [ weight = 1 ];
	"flask/controller.py" -> "compute.popularity_of_operators"	 [ weight = 1 ];
	"flask/controller.py" -> "handler_debug.setLevel"	 [ weight = 1 ];
	"flask/controller.py" -> "latex_generated_by_sympy.keys"	 [ weight = 1 ];
	"flask/controller.py" -> "selected_string.split"	 [ weight = 4 ];
	"flask/controller.py" -> "logger.warning"	 [ weight = 2 ];
	"flask/controller.py" -> FormField	 [ weight = 1 ];
	"flask/controller.py" -> "logger.debug"	 [ weight = 55 ];
	"flask/controller.py" -> jsonify	 [ weight = 18 ];
	"flask/controller.py" -> "compute.generate_auth_summary"	 [ weight = 1 ];
	"flask/controller.py" -> "this_key.startswith"	 [ weight = 3 ];
	"flask/controller.py" -> print	 [ weight = 1 ];
	"flask/controller.py" -> "find_key.replace"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.file_tail"	 [ weight = 5 ];
	"flask/controller.py" -> SecureHeaders	 [ weight = 1 ];
	"flask/controller.py" -> "compute.generate_latex_from_sympy"	 [ weight = 6 ];
	"flask/controller.py" -> "userinfo_response.json"	 [ weight = 5 ];
	"flask/controller.py" -> "compute.delete_step_from_derivation"	 [ weight = 3 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_expr_not_in_use"	 [ weight = 1 ];
	"flask/controller.py" -> "os.walk"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.list_symbols_used_in_derivation_from_PDG_AST"	 [ weight = 2 ];
	"flask/controller.py" -> InferenceRuleForm	 [ weight = 1 ];
	"flask/controller.py" -> "compute.update_symbol_in_step"	 [ weight = 5 ];
	"flask/controller.py" -> "csrf.init_app"	 [ weight = 1 ];
	"flask/controller.py" -> "shutil.copy"	 [ weight = 1 ];
	"flask/controller.py" -> "this_key.replace"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.update_expr_latex"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.list_local_id_for_derivation"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.add_symbol_to_expr"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.list_symbols_used_in_step_from_sympy"	 [ weight = 2 ];
	"flask/controller.py" -> "file_obj.save"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_derivations"	 [ weight = 2 ];
	"flask/controller.py" -> send_from_directory	 [ weight = 1 ];
	"flask/controller.py" -> SymbolEntry	 [ weight = 1 ];
	"flask/controller.py" -> "logger.error"	 [ weight = 113 ];
	"flask/controller.py" -> "compute.generate_tex_for_derivation"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.update_linear_index"	 [ weight = 1 ];
	"flask/controller.py" -> "logging.getLogger"	 [ weight = 3 ];
	"flask/controller.py" -> "sorted_list_infrules.sort"	 [ weight = 1 ];
	"flask/controller.py" -> "handler_info.setLevel"	 [ weight = 1 ];
	"flask/controller.py" -> RadioField	 [ weight = 14 ];
	"flask/controller.py" -> "compute.rename_derivation"	 [ weight = 1 ];
	"flask/controller.py" -> LoginManager	 [ weight = 1 ];
	"flask/controller.py" -> NewSymbolForm	 [ weight = 1 ];
	"flask/controller.py" -> url_for	 [ weight = 44 ];
	"flask/controller.py" -> "compute.delete_derivation"	 [ weight = 1 ];
	"flask/controller.py" -> "client.prepare_request_uri"	 [ weight = 1 ];
	"flask/controller.py" -> StringField	 [ weight = 56 ];
	"flask/controller.py" -> list	 [ weight = 9 ];
	"flask/controller.py" -> "logger.info"	 [ weight = 134 ];
	"flask/controller.py" -> "compute.generate_pdf_for_derivation"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.edit_step_note"	 [ weight = 1 ];
	"flask/controller.py" -> "validators.InputRequired"	 [ weight = 25 ];
	"flask/controller.py" -> "sorted_list_operators.sort"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.rank_candidate_pdg_symbols_for_sympy_symbol"	 [ weight = 3 ];
	"flask/controller.py" -> "compute.delete_expr"	 [ weight = 1 ];
	"flask/controller.py" -> "login_manager.init_app"	 [ weight = 1 ];
	"flask/controller.py" -> get_google_provider_cfg	 [ weight = 2 ];
	"flask/controller.py" -> "compute.list_symbols_used_in_step_from_PDG_AST"	 [ weight = 3 ];
	"flask/controller.py" -> "compute.delete_inf_rule"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.list_global_id_not_in_derivation"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_inf_rules_not_in_use"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.edit_inf_rule_latex"	 [ weight = 1 ];
	"flask/controller.py" -> bytes	 [ weight = 1 ];
	"flask/controller.py" -> "compute.generate_graphviz_of_step_with_numeric_IDs"	 [ weight = 1 ];
	"flask/controller.py" -> "client.add_token"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.delete_operator"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.initialize_derivation"	 [ weight = 1 ];
	"flask/controller.py" -> "response.get_data"	 [ weight = 1 ];
	"flask/controller.py" -> "logging.basicConfig"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.find_symbols_in_step_that_lack_id"	 [ weight = 5 ];
	"flask/controller.py" -> "json.dumps"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.add_symbol"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.create_step_graphviz_png"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.generate_html_for_derivation"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.list_new_linear_indices"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.allowed_file"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.create_AST_png_per_expression_in_step"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.generate_expr_dict_with_symbol_list"	 [ weight = 3 ];
	"flask/controller.py" -> WebApplicationClient	 [ weight = 1 ];
	"flask/controller.py" -> Exception	 [ weight = 2 ];
	"flask/controller.py" -> redirect	 [ weight = 47 ];
	"flask/controller.py" -> "vdim.validate_dimensions"	 [ weight = 2 ];
	"flask/controller.py" -> "compute.count_of_infrules"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.validate_json_file"	 [ weight = 1 ];
	"flask/controller.py" -> IntegerField	 [ weight = 3 ];
	"flask/controller.py" -> "User.create"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.get_sorted_list_of_operators_not_in_use"	 [ weight = 1 ];
	"flask/controller.py" -> "web_form.validate"	 [ weight = 1 ];
	"flask/controller.py" -> "client.prepare_token_request"	 [ weight = 1 ];
	"flask/controller.py" -> "compute.modify_latex_in_expressions"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> "clib.read_db"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> "random.randint"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> "dimsys_SI.equivalent_dims"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> eval	 [ weight = 2 ];
	"flask/validate_dimensions_sympy.py" -> len	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> str	 [ weight = 12 ];
	"flask/validate_dimensions_sympy.py" -> "latex_to_sympy.get_symbol_IDs_from_AST_str"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> "logger.debug"	 [ weight = 6 ];
	"flask/validate_dimensions_sympy.py" -> "logger.error"	 [ weight = 2 ];
	"flask/validate_dimensions_sympy.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> "latex_to_sympy.get_sympy_expr_from_AST_str"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> "logger.info"	 [ weight = 1 ];
	"flask/validate_dimensions_sympy.py" -> exec	 [ weight = 2 ];
	"flask/validate_dimensions_sympy.py" -> Exception	 [ weight = 2 ];
	"flask/introspection/generate_csv.py" -> "re.search"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "json.load"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "latex_from_sympy.replace"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "sympy.latex"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "pdg_id.replace"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> str	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> replace_id_with_str	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> open	 [ weight = 2 ];
	"flask/introspection/generate_csv.py" -> print	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> get_sympy_expr_from_AST_str	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "sympy_expr.replace"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> input	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "m.group"	 [ weight = 1 ];
	"flask/introspection/generate_csv.py" -> "fil.write"	 [ weight = 2 ];
	"flask/compute.py" -> wraps	 [ weight = 1 ];
	"flask/compute.py" -> "step_as_latex.replace"	 [ weight = 4 ];
	"flask/compute.py" -> "list_of_local_expr.append"	 [ weight = 1 ];
	"flask/compute.py" -> create_tex_file_for_expr	 [ weight = 1 ];
	"flask/compute.py" -> recurse	 [ weight = 3 ];
	"flask/compute.py" -> "operators_per_expr.items"	 [ weight = 1 ];
	"flask/compute.py" -> "latex_for_step_dict.items"	 [ weight = 2 ];
	"flask/compute.py" -> "new_list.insert"	 [ weight = 1 ];
	"flask/compute.py" -> "derivation_popularity_dict.items"	 [ weight = 2 ];
	"flask/compute.py" -> convert_df_to_pkl	 [ weight = 1 ];
	"flask/compute.py" -> "clib.read_db"	 [ weight = 77 ];
	"flask/compute.py" -> isinstance	 [ weight = 3 ];
	"flask/compute.py" -> "os.strerror"	 [ weight = 1 ];
	"flask/compute.py" -> "match_list.append"	 [ weight = 1 ];
	"flask/compute.py" -> "step_dict.keys"	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_all_expr_global_IDs_for_this_deriv.append"	 [ weight = 1 ];
	"flask/compute.py" -> "logging.error"	 [ weight = 3 ];
	"flask/compute.py" -> "list_of_infrules_not_in_use.sort"	 [ weight = 1 ];
	"flask/compute.py" -> "symbol_candidate_dict.items"	 [ weight = 1 ];
	"flask/compute.py" -> "json.load"	 [ weight = 1 ];
	"flask/compute.py" -> "lat_file.write"	 [ weight = 48 ];
	"flask/compute.py" -> "collections.OrderedDict"	 [ weight = 1 ];
	"flask/compute.py" -> "random.randint"	 [ weight = 81 ];
	"flask/compute.py" -> set	 [ weight = 21 ];
	"flask/compute.py" -> "list_of_expression_AST_pictures.append"	 [ weight = 1 ];
	"flask/compute.py" -> "operator_popularity_dict.items"	 [ weight = 1 ];
	"flask/compute.py" -> max	 [ weight = 1 ];
	"flask/compute.py" -> "df.to_sql"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_global_id_not_in_derivation.sort"	 [ weight = 1 ];
	"flask/compute.py" -> "sympy.latex"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_nodes.append"	 [ weight = 4 ];
	"flask/compute.py" -> float	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_linear_indices.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_operators.append"	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_edges.append"	 [ weight = 5 ];
	"flask/compute.py" -> create_step_id	 [ weight = 1 ];
	"flask/compute.py" -> "re.findall"	 [ weight = 2 ];
	"flask/compute.py" -> "symbol_dict.keys"	 [ weight = 8 ];
	"flask/compute.py" -> "os.chdir"	 [ weight = 2 ];
	"flask/compute.py" -> "clib.write_db"	 [ weight = 27 ];
	"flask/compute.py" -> "list_of_edge_str.append"	 [ weight = 1 ];
	"flask/compute.py" -> list_symbols_used_in_derivation_from_PDG_AST	 [ weight = 1 ];
	"flask/compute.py" -> validate	 [ weight = 1 ];
	"flask/compute.py" -> "flt_dict.keys"	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_symbols_not_in_use.append"	 [ weight = 1 ];
	"flask/compute.py" -> "expr_dict.keys"	 [ weight = 2 ];
	"flask/compute.py" -> "logs_to_stats.plot_country_per_day_vs_time"	 [ weight = 1 ];
	"flask/compute.py" -> remove_file_debris	 [ weight = 6 ];
	"flask/compute.py" -> convert_data_to_rdf	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_expr_not_in_use.append"	 [ weight = 1 ];
	"flask/compute.py" -> len	 [ weight = 32 ];
	"flask/compute.py" -> popularity_of_symbols_in_expressions	 [ weight = 3 ];
	"flask/compute.py" -> "expressions_per_derivation.items"	 [ weight = 2 ];
	"flask/compute.py" -> "derivations_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_linear_index.append"	 [ weight = 3 ];
	"flask/compute.py" -> get_list_of_sorted_linear_indices	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_candidate_symbol_ids.append"	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_uses.append"	 [ weight = 2 ];
	"flask/compute.py" -> "unit_dict.keys"	 [ weight = 1 ];
	"flask/compute.py" -> "measure_dict.keys"	 [ weight = 1 ];
	"flask/compute.py" -> "os.mkdir"	 [ weight = 2 ];
	"flask/compute.py" -> "os.remove"	 [ weight = 3 ];
	"flask/compute.py" -> convert_dataframes_to_sql	 [ weight = 1 ];
	"flask/compute.py" -> edges_in_derivation	 [ weight = 1 ];
	"flask/compute.py" -> "measures_list_of_dicts.append"	 [ weight = 2 ];
	"flask/compute.py" -> str	 [ weight = 143 ];
	"flask/compute.py" -> "operators_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> filter	 [ weight = 17 ];
	"flask/compute.py" -> "signal.alarm"	 [ weight = 2 ];
	"flask/compute.py" -> "latex_for_step_dict.to_dict"	 [ weight = 1 ];
	"flask/compute.py" -> "fil.read"	 [ weight = 1 ];
	"flask/compute.py" -> popularity_of_expressions	 [ weight = 3 ];
	"flask/compute.py" -> open	 [ weight = 14 ];
	"flask/compute.py" -> "inputs_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> list_symbols_used_in_step_from_PDG_AST	 [ weight = 2 ];
	"flask/compute.py" -> create_symbol_id	 [ weight = 1 ];
	"flask/compute.py" -> "latex_to_sympy.list_symbols_used_in_latex_from_sympy"	 [ weight = 5 ];
	"flask/compute.py" -> "list_of_expr_not_in_use.sort"	 [ weight = 1 ];
	"flask/compute.py" -> "logger.warn"	 [ weight = 2 ];
	"flask/compute.py" -> "latex_to_sympy.get_symbol_IDs_from_AST_str"	 [ weight = 5 ];
	"flask/compute.py" -> "logger.warning"	 [ weight = 1 ];
	"flask/compute.py" -> "shutil.rmtree"	 [ weight = 2 ];
	"flask/compute.py" -> "symbols_list_of_dicts.append"	 [ weight = 2 ];
	"flask/compute.py" -> enumerate	 [ weight = 1 ];
	"flask/compute.py" -> "logger.debug"	 [ weight = 65 ];
	"flask/compute.py" -> list_expr_in_step	 [ weight = 2 ];
	"flask/compute.py" -> "all_dfs.items"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_operators_not_in_use.sort"	 [ weight = 1 ];
	"flask/compute.py" -> "pickle.dump"	 [ weight = 1 ];
	"flask/compute.py" -> popularity_of_derivations	 [ weight = 1 ];
	"flask/compute.py" -> create_expr_local_id	 [ weight = 3 ];
	"flask/compute.py" -> "this_symbol_is_in_derivations.append"	 [ weight = 1 ];
	"flask/compute.py" -> "os.getcwd"	 [ weight = 3 ];
	"flask/compute.py" -> popularity_of_operators	 [ weight = 2 ];
	"flask/compute.py" -> "symbol_popularity_dict_in_expr.items"	 [ weight = 1 ];
	"flask/compute.py" -> "this_str.split"	 [ weight = 2 ];
	"flask/compute.py" -> "logs_to_stats.plot_username_distribution"	 [ weight = 1 ];
	"flask/compute.py" -> dict	 [ weight = 1 ];
	"flask/compute.py" -> range	 [ weight = 1 ];
	"flask/compute.py" -> "shutil.copy"	 [ weight = 11 ];
	"flask/compute.py" -> "new_list.append"	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_linear_index.sort"	 [ weight = 2 ];
	"flask/compute.py" -> TypedDict	 [ weight = 1 ];
	"flask/compute.py" -> round	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_infrules_not_in_use.append"	 [ weight = 1 ];
	"flask/compute.py" -> create_expr_global_id	 [ weight = 3 ];
	"flask/compute.py" -> "latex_to_sympy.create_AST_png_for_latex"	 [ weight = 1 ];
	"flask/compute.py" -> "signal.signal"	 [ weight = 1 ];
	"flask/compute.py" -> "json.dump"	 [ weight = 1 ];
	"flask/compute.py" -> "shutil.move"	 [ weight = 7 ];
	"flask/compute.py" -> "logs_to_stats.plot_username_vs_time"	 [ weight = 1 ];
	"flask/compute.py" -> popularity_of_infrules	 [ weight = 2 ];
	"flask/compute.py" -> "expression_dict.keys"	 [ weight = 1 ];
	"flask/compute.py" -> md5_of_string	 [ weight = 8 ];
	"flask/compute.py" -> "list_of_operators_not_in_use.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_local_id.sort"	 [ weight = 1 ];
	"flask/compute.py" -> "logger.error"	 [ weight = 30 ];
	"flask/compute.py" -> "t.items"	 [ weight = 1 ];
	"flask/compute.py" -> "units_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> "cv2.imread"	 [ weight = 4 ];
	"flask/compute.py" -> "pandas.DataFrame"	 [ weight = 12 ];
	"flask/compute.py" -> "subprocess.run"	 [ weight = 10 ];
	"flask/compute.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_picture_names.append"	 [ weight = 4 ];
	"flask/compute.py" -> flatten_dict	 [ weight = 2 ];
	"flask/compute.py" -> "latex_to_sympy.get_sympy_expr_from_AST_str"	 [ weight = 1 ];
	"flask/compute.py" -> generate_tex_for_derivation	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_sympy_symbols_lacking_PDG_id.append"	 [ weight = 1 ];
	"flask/compute.py" -> "latex_to_sympy.create_sympy_expr_tree_from_latex"	 [ weight = 2 ];
	"flask/compute.py" -> "list_of_tuples.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_deriv.append"	 [ weight = 1 ];
	"flask/compute.py" -> create_png_from_latex	 [ weight = 13 ];
	"flask/compute.py" -> create_deriv_id	 [ weight = 1 ];
	"flask/compute.py" -> "outputs_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_symbols_not_in_use.sort"	 [ weight = 1 ];
	"flask/compute.py" -> list	 [ weight = 30 ];
	"flask/compute.py" -> "logger.info"	 [ weight = 156 ];
	"flask/compute.py" -> write_step_to_graphviz_file	 [ weight = 2 ];
	"flask/compute.py" -> "str_to_hash.encode"	 [ weight = 1 ];
	"flask/compute.py" -> "symbol_popularity_dict.items"	 [ weight = 1 ];
	"flask/compute.py" -> func	 [ weight = 1 ];
	"flask/compute.py" -> "latex_to_sympy.remove_latex_presention_markings"	 [ weight = 1 ];
	"flask/compute.py" -> "step_ids_in_use.append"	 [ weight = 1 ];
	"flask/compute.py" -> "logs_to_stats.auth_log_to_df"	 [ weight = 1 ];
	"flask/compute.py" -> int	 [ weight = 13 ];
	"flask/compute.py" -> "df.astype"	 [ weight = 1 ];
	"flask/compute.py" -> "logs_to_stats.plot_ip_vs_time"	 [ weight = 1 ];
	"flask/compute.py" -> "local_to_global_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> sorted	 [ weight = 1 ];
	"flask/compute.py" -> "hashlib.md5"	 [ weight = 2 ];
	"flask/compute.py" -> find_symbols_in_step_that_lack_id	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_global_expr.append"	 [ weight = 2 ];
	"flask/compute.py" -> md5_of_file	 [ weight = 2 ];
	"flask/compute.py" -> "expr_popularity_dict.items"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_linear_indices.sort"	 [ weight = 1 ];
	"flask/compute.py" -> list_symbols_used_in_step_from_sympy	 [ weight = 1 ];
	"flask/compute.py" -> convert_data_to_cypher	 [ weight = 1 ];
	"flask/compute.py" -> "re.split"	 [ weight = 2 ];
	"flask/compute.py" -> convert_json_to_dataframes	 [ weight = 1 ];
	"flask/compute.py" -> "infrules_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_local_id.append"	 [ weight = 1 ];
	"flask/compute.py" -> "global_ids_in_derivation.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_expr.sort"	 [ weight = 1 ];
	"flask/compute.py" -> send_email	 [ weight = 1 ];
	"flask/compute.py" -> list_expr_in_derivation	 [ weight = 1 ];
	"flask/compute.py" -> "list_infrule.sort"	 [ weight = 1 ];
	"flask/compute.py" -> "infrule_popularity_dict.items"	 [ weight = 1 ];
	"flask/compute.py" -> "expressions_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_infrules.append"	 [ weight = 1 ];
	"flask/compute.py" -> "steps_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_symbol_ids.append"	 [ weight = 2 ];
	"flask/compute.py" -> "deriv_uses_expr_global_id.items"	 [ weight = 1 ];
	"flask/compute.py" -> Exception	 [ weight = 35 ];
	"flask/compute.py" -> "f.readlines"	 [ weight = 1 ];
	"flask/compute.py" -> "feeds_list_of_dicts.append"	 [ weight = 1 ];
	"flask/compute.py" -> hasattr	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_tups.append"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_candidate_ids.append"	 [ weight = 3 ];
	"flask/compute.py" -> flatten_list	 [ weight = 1 ];
	"flask/compute.py" -> "fil.write"	 [ weight = 34 ];
	"flask/compute.py" -> "filename.rsplit"	 [ weight = 1 ];
	"flask/compute.py" -> "list_of_symbols.append"	 [ weight = 1 ];
	"flask/compute.py" -> "sqlite3.connect"	 [ weight = 1 ];
	"flask/mvcc/app.py" -> "app.run"	 [ weight = 1 ];
	"flask/mvcc/app.py" -> render_template	 [ weight = 1 ];
	"flask/mvcc/app.py" -> BooleanField	 [ weight = 1 ];
	"flask/mvcc/app.py" -> "app.route"	 [ weight = 1 ];
	"flask/mvcc/app.py" -> Flask	 [ weight = 1 ];
	"flask/mvcc/app.py" -> PasswordField	 [ weight = 1 ];
	"flask/mvcc/app.py" -> StringField	 [ weight = 1 ];
	"flask/mvcc/app.py" -> SubmitField	 [ weight = 1 ];
	"flask/mvcc/app.py" -> DataRequired	 [ weight = 2 ];
	"flask/latex_to_sympy.py" -> "sympy.srepr"	 [ weight = 2 ];
	"flask/latex_to_sympy.py" -> "random.randint"	 [ weight = 6 ];
	"flask/latex_to_sympy.py" -> set	 [ weight = 2 ];
	"flask/latex_to_sympy.py" -> "ast_str.replace"	 [ weight = 17 ];
	"flask/latex_to_sympy.py" -> "re.findall"	 [ weight = 2 ];
	"flask/latex_to_sympy.py" -> "sympy.Symbol"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> remove_latex_presention_markings	 [ weight = 5 ];
	"flask/latex_to_sympy.py" -> eval	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> len	 [ weight = 4 ];
	"flask/latex_to_sympy.py" -> str	 [ weight = 23 ];
	"flask/latex_to_sympy.py" -> open	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "logger.debug"	 [ weight = 26 ];
	"flask/latex_to_sympy.py" -> "this_match.replace"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> get_sympy_expr_from_AST_str	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "shutil.move"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "x.replace"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "logger.error"	 [ weight = 8 ];
	"flask/latex_to_sympy.py" -> "latex_expr_str.replace"	 [ weight = 15 ];
	"flask/latex_to_sympy.py" -> "subprocess.run"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "logging.getLogger"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "latex_expr_str.split"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "symp_lat.atoms"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> list	 [ weight = 4 ];
	"flask/latex_to_sympy.py" -> "logger.info"	 [ weight = 13 ];
	"flask/latex_to_sympy.py" -> "ast_str.split"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> parse_latex	 [ weight = 8 ];
	"flask/latex_to_sympy.py" -> "ast_str.startswith"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> Exception	 [ weight = 7 ];
	"flask/latex_to_sympy.py" -> "fil.write"	 [ weight = 1 ];
	"flask/latex_to_sympy.py" -> "list_of_symbols.append"	 [ weight = 2 ];
	"flask/mvcc/app_hello.py" -> "app.run"	 [ weight = 1 ];
	"flask/mvcc/app_hello.py" -> render_template	 [ weight = 1 ];
	"flask/mvcc/app_hello.py" -> "app.route"	 [ weight = 1 ];
	"flask/mvcc/app_hello.py" -> Flask	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "dct.keys"	 [ weight = 3 ];
	"flask/introspection/ast_test.py" -> "f.read"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "re.findall"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> FuncLister	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "X.visit"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "df.dropna"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> str	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "self.generic_visit"	 [ weight = 2 ];
	"flask/introspection/ast_test.py" -> open	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "f.close"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "X.output_DataFrame"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "dct_v1.keys"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "ast.parse"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "df.to_csv"	 [ weight = 1 ];
	"flask/introspection/ast_test.py" -> "pd.DataFrame"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "re.search"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "json.load"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "latex_from_sympy.replace"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "sympy.latex"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "pdg_id.replace"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> str	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> replace_id_with_str	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> open	 [ weight = 2 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> get_sympy_expr_from_AST_str	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "sympy_expr.replace"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "m.group"	 [ weight = 1 ];
	"flask/introspection/generate_latex_and_sympy_comparison_as_csv_file.py" -> "fil.write"	 [ weight = 2 ];
	"flask/json_schema.py" -> "logging.getLogger"	 [ weight = 1 ];
}
